# -*- coding: utf-8 -*-
"""textrank.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYqB9EjjG_c4fqvLkszd-saC5to5Y8JM

*Imports*
"""

import nltk
import numpy as np
import pandas as pd
nltk.download('punkt')
from sklearn.metrics.pairwise import cosine_similarity
import networkx as nx
import nltk
from nltk.tokenize import sent_tokenize

"""*Mount drive*"""

from google.colab import drive
drive.mount('/content/drive')

## Download glove embeddings

! wget http://nlp.stanford.edu/data/glove.6B.zip
! unzip glove*.zip

df = pd.read_csv("/content/drive/MyDrive/Dissertation/data/pickled_for_colab.csv",encoding='latin-1')[4000:]
ep_description = df.episode_description
ep_description = ep_description[:50].to_frame() 

textrank_data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/textrank.csv")

concat_data = pd.concat([textrank_data,ep_description],axis=1)

"""*Get the glove embeddings from the file*"""

embeddings = {}
file = open('/content/drive/MyDrive/Dissertation/data/glove.6B.50d.txt', encoding='utf-8')
for line in file:
    vals = line.split()
    word = vals[0]
    coefficients = np.asarray(vals[1:], dtype='float32')
    embeddings[word] = coefficients
file.close()

def build_similarity_matrix(sentences):
  #create an empty similarity matrix
  mat_len = len(sentences)
  matrix = np.zeros([mat_len, mat_len])
  for i in range(mat_len):
    for j in range(mat_len):
      if i != j:
        matrix[i][j] = cosine_similarity(vectors[i].reshape(1, 50), vectors[j].reshape(1, 50))[0, 0]
  return matrix

def get_vectors(embeddings, sentences):
  vectors = []
  for sent in sentences:
    w_lst = sent.split()
    v = sum([embeddings.get(w, np.zeros((50,))) for w in w_lst])
    v = v/ (len(w_lst) + 0.00001)
    vectors.append(v)
  return vectors

"""*Get the TextRanked versions*"""

return_trans = []
end = 0

for trans in df['transcript']:
  print(end)
  sentences = sent_tokenize(trans)
  vectors = get_vectors(embeddings, sentences)
  matrix = build_similarity_matrix(sentences)
  graph = nx.from_numpy_array(matrix)
  #get the scores
  scores = nx.pagerank(graph, alpha=0.85, max_iter=100)
  sentence_scores = []
  for i, sent in enumerate(sentences):
    sentence_scores.append((scores[i], sent))
  #rank the sentences in order of descending scores
  ranked_sentences = [ranked for (_, ranked) in sorted(sentence_scores, reverse=True)]
  complete_ranked_piece = [' '.join(sent for sent in ranked_sentences)]
  
  return_trans.append(complete_ranked_piece)

"""*Write the results to the file*"""

return_df_textrank = pd.DataFrame(return_trans,columns=['trans'])
name = "text_rank.csv"
return_df_textrank.to_csv('/content/drive/MyDrive/Dissertation/data/' + name)
